class Solution {
    public int largestRectangleArea(int[] heights) {
        int nle[] = new int[heights.length];
        int ple[] = new int[heights.length];
        Stack<Integer> stack = new Stack<>();
        int n = heights.length;
        // Fill NLE and PLE in one single loop
        // PLE can be filled with stack.peek() for the current element 
        // since the stack.peek() is always smaller than the current element - increasing Monotonic Stack.
        // for the same elements, we need to just copy
        for (int i=0; i<n; ++i) {
            // filling NLE here..
            while (!stack.isEmpty() && heights[stack.peek()] > heights[i]) {
                nle[stack.pop()] = i;
            }
            // filling PLE here.. 
            /* 
                PLE has 2 cases:
                one where heights[i] == stack.peek() i.e.   6, 6, 7, 6
                                                            0, 1, 2, 3
                so for 3rd Index i.e. for last 6, the stack is 0, 1 at this point... so check 3rd index with stack.peek()
            */
            if (!stack.isEmpty() && heights[stack.peek()] == heights[i]) {
                ple[i] = ple[stack.peek()];
            } else {
                // If stack is Empty() that means that there are no elements smaller than this hence -1
                if (stack.isEmpty()) {
                    ple[i] = -1;
                } else {
                    // peek of the stack is smaller element than the current element
                    ple[i] = stack.peek();
                }
            }
            stack.push(i);
        }
        while (!stack.isEmpty()) {
            nle[stack.pop()] = n;
        }
        int result = 0;
        for (int i=0; i<n; ++i) {
            result = Math.max(result, heights[i] * ((nle[i] - ple[i]) - 1));
        }
        return result;
    }
    public int _largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int result = 0;
        
        for (int i=0; i<heights.length; ++i) {
            while (!stack.isEmpty() && heights[stack.peek()] > heights[i]) {
                int curr = heights[stack.pop()];
                if (stack.isEmpty()) {
                    result = Math.max(result, curr*i);
                } else {
                    result = Math.max(result, curr * (i-stack.peek() - 1));
                }
            }
            stack.push(i);
        }
        
        int n = heights.length;
        while (!stack.isEmpty()) {
            int curr = heights[stack.pop()];
            if (stack.isEmpty()) {
                result = Math.max(result, curr*n);
            } else {
                result = Math.max(result, curr * (n-stack.peek() - 1));
            }
        }
        return result;
    }
}
